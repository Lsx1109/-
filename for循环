for(表达式1;表达式2;表达式3）
{   语句组
}
1）计算“表达式”1
2）计算“表达式2”，若其值为true，则执行“{}”中的语句组然后转到3）;若为false，则不再执行“{}”中的语句组，for语句结束，转到5）。
3）计算“表达式3”
4）转到2）
5）从for语句后面继续往下执行

不可再for循环内修改循环变量，防止for循环失去控制
建议for语句的循环控制变量的取值采用“前闭后开”写法

1.for循环的初始化、调整、判断都可省略
但是：for循环的判断部分被省略，那判断条件就是：恒为真
2.如果不熟，建议不要随便省略

循环控制变量定义在“表达式1”中，则其只在for语句内部起作用，可以不用担心循环控制变量重名
int i;
	for (i = 0; i < 26; ++i)
		cout << char('a' + i);
	cout << endl;
	for (i = 0; i < 26; i += 2)
		cout << char('A' + i);
	cout << endl;
	return 0;
int main()
{
	int i = 0;//初始化
	while (i<10)//判断
	{
		i++;//调整
	}
	return 0;
}



int main()
{
	int i = 0;
	//   初始化  判断    调整
	for (i = 1; i <= 10; i++)
	{
		printf("%d\n", i);
	}
	return 0;
}


int main()
{
	int i = 0;
	for (i = 1; i <= 10; i++)
	{
		if (i == 5)
			continue;
		printf("%d\n", i);
	}
	return 0;
}


int main()
{
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		if (i == 5)
		{
			printf("haha\n");
		}
		printf("hehe\n");
	}
	return 0;
}


int main()
{
	int arr[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		printf(",%d", arr[i]);
	}
	return 0;
}


int main()
{
	int i = 0;
	int j = 0;
	for (i = 0; i < 10; i++)
	{
		for (j = 0; j < 10; j++) 
		{
			printf("hehe\n");
		}
	}
	return 0;
}



int main()
{
	int i = 0;
	int j = 0;
	for (; i < 10; i++)
	{
		for (; j < 10; j++) 
		{
			printf("hehe\n");
		}
	}
	return 0;
}


int main()
{
	int i = 0;
	int k = 0;
	for (i = 0, k = 0; k = 0; i++, k++)
		k++;
	return 0;
}
循环0次
