int a[100];
名字为a的数组，有100个元素，每个元素都是int变量

T a[N];         //T为类型名，如char，int等
                //N为正整数或值为正整数的常量表达式
数组a有N个元素，每个元素都是类型为T的变量。
N个元素在内存里是一个挨一个连续存放的。
a数组占用大小总共为 N × sizeof(T)字节的储存空间
sizeof(a)的值为整个数组的体积，即N × sizeof(T)

数组下标从0开始，N个元素的数组，下标从0至N-1

数组名a代表数组的地址，假设为p，则变量a[i]的地址就是p+i*sizeof(int)

例题：接受键盘输入的100个整数，然后将他们按和原顺序相反的顺序输出
#include<iostream>
#include<cstdio>
using namespace std;
#define num 100
int a[num];//数组一般不定义在main中，尤其是大数组
int main(){
	for (int i = 0; i < num; ++i)
		cin >> a[i];
	for (int i = num - 1; i >= 0; --i)
		cout << a[i] << " ";
	return 0;
}

数组的初始化：定义一个一维数组的同时，就可以给数组中的元素赋初值
类型名  数组名[常量表达式]={...};
{}中的各数据值即为各元素的初值，值之间用逗号间隔
int a[10]={0,1,2,3,4,5,6,7,8,9};
效果：a[0]=0;a[1]=1...a[9]=9

数组初始化时，{}中值的个数可以少于元素个数。相当于只给前面部分元素赋值，而后面的元素，其存储空间里的每个字节都被写入二进制数0;
int a[10]={0,1,2,3,4};
只给a[0]~a[4]赋值，后5个自动赋值0

定义数组的时候，如给全部元素赋值，则可以不给出数组元素的个数：
int a[]={1,2,3,4,5};

数组取代复杂分支结构：用数组存放一些固定不变的值，以取代复杂的分支结构
#include<iostream>
#include<string>
using namespace std;
string weekdays[] = { "monday", "tuesday", "wednesday", "thuesday", "firday",
"saturday","sunday"};
//string是字符串类型，可存放字符串常量
int main()
{
	int n;
	cin >> n;
	if (n > 7 || n < 1)
		cout << "illegal";
	else
		cout << weekdays[n - 1];
	return 0;


数组的越界
数组元素下标，可以是任何整数可以是负数，也可以大于数组的元素个数。不会导致编译错误。
int a[10];
int a[-2]=5;int a[200]=10;
int m=a[30];
可能导致程序运行出错，因为可能写入了别的变量的内存空间，或写入指令的内存空间
用变量作为数组下标时，不小心会导致数组越界（变量下标值变为负数，或者太大）
可能引起意外修改其他变量的值，导致程序运行结果不正确
可能试图访问不该访问的内存区域，导致程序崩溃
数组越界的程序用某些编译器编译编译后可能可以正常运行，换一个编译器后就运行错误


二维数组
定义N行M列的二维数组
T a[N][M] //N×M个元素在内存里是一个挨一个连续存放的。
访问数组元素的方法：
数组名[行下标][列下标]  //行，列下标都从0开始
数组T a[N][M]每一行都有M个元素
第i行元素就是a[i][0],a[i][1],...,a[i][M-1].
a[0][0]地址最小元素，若在a[0][0]存放在地址n，则a[i][j]存放的地址就是n+i×M×sizeof（T）+j×sizeof（T）


二维数组的初始化
int a[5][3] = {{80,75,92},{61,65},{59,63,70},{85,90},{75,65,55}};
每层内的{}，初始化数组中的一行
初始化时，如果每行都进行了初始化，也可以不给出行数：
int a[0][3] = {{80,75,92}，{61,65}}；
a是一个两行三列数组，a[1][2]被初始化成0。


例题：输出二维数组所有元素
#define m 20
#define n 30
int a[m][n];
int main()
{
	for (int i = 0; i < m; ++i)
	{
		for (int j = 0; j < n; ++j)
			cout << a[i][j] << " ";
		cout << endl;
	}
	return 0;
}


编程求两个矩阵相乘的结果。输入第一行是整数m, n，表示第一个矩阵是m行n列的。
接下来时一个m×n的矩阵。再下一行的输入是整数p,q，表示下一个矩阵是p行q列 (n=p)
再接下来就是一个p行q列的矩阵。
要求输出两个矩阵相乘的结果矩阵(1 < m, n,p, q<= 8)。
#include<iostream>
using namespace std;
#define h 8
#define l 8
int a[h][l];
int b[h][l];
int c[h][l];
int main()
{
	int m, n, p, q;
	cin >> m >> n;
	for (int i = 0; i < m;++i)
	for (int j = 0; j < n; ++j)
		cin >> a[i][j];
	cin >> p >> q;
	for (int i = 0; i < p;++i)
	for (int j = 0; j < q; ++j)
		cin >> b[i][j];
	for (int i = 0; i < m; ++i)
	{
		for (int j = 0; j < q; ++j)
		{
			c[i][j] = 0;
			for (int k = 0; k < n; ++k)
				c[i][j] += a[i][j] * b[k][j];
		}
	}
	for (int i = 0; i < m; ++i)
	{
		for (int j = 0; j < q; ++j){
			cout << c[i][j] << " ";
		}
		cout << endl;
	}
	return 0;
}






















