描述
给出班里某门课程的成绩单，请你按成绩从高到低对成绩单排序输出，如果有相同分数则名字字典序小的在前。
输入
第一行为n (0 < n < 20)，表示班里的学生数目；
接下来的n行，每行为每个学生的名字和他的成绩, 中间用单个空格隔开。名字只包含字母且长度不超过20，成绩为一个不大于100的非负整数。
输出
把成绩单按分数从高到低的顺序进行排序并输出，每行包含名字和分数两项，之间有一个空格。
#include<iostream>
struct stusco
{
    std::string name;
    int score;
};

int main()
{
    int n;
    std::cin >> n;
    stusco classinfo[n];
    for(int i=0;i<n;i++)
    {
        std::cin >> classinfo[i].name >> classinfo[i].score;
    }
    stusco tmp;
    for(int i=n-1;i>0;i--)
    {
        for(int j=0;j<i;j++)
        {
            if(classinfo[j+1].score>classinfo[j].score)
            {
                tmp=classinfo[j];
                classinfo[j]=classinfo[j+1];
                classinfo[j+1]=tmp;
            }
            if(classinfo[j+1].score==classinfo[j].score&&
                classinfo[j+1].name<classinfo[j].name)  //当分数相同时对name排序
            {
                tmp=classinfo[j];
                classinfo[j]=classinfo[j+1];
                classinfo[j+1]=tmp;
            }
        }  
    }
    for(int i=0;i<n;i++)
    {
        std::cout << classinfo[i].name << " " << classinfo[i].score << "\n";
    }
    return 0;
}

描述
世博会志愿者的选拔工作正在 A 市如火如荼的进行。为了选拔最合适的人才，A市对所有报名的选手进行了笔试，笔试分数达到面试分数线的选手方可进入面试。面试分数线根据计划录取人数的150%划定，即如果计划录取m名志愿者，则面试分数线为排名第m*150%（向下取整）名的选手的分数，而最终进入面试的选手为笔试成绩不低于面试分数线的所有选手。
现在就请你编写程序划定面试分数线，并输出所有进入面试的选手的报名号和笔试成绩。
输入
第一行，两个整数n，m（5 ≤ n ≤ 5000，3 ≤ m ≤ n），中间用一个空格隔开，其中n 表示报名参加笔试的选手总数，m 表示计划录取的志愿者人数。输入数据保证m*150%向下取整后小于等于n。
第二行到第 n+1 行，每行包括两个整数，中间用一个空格隔开，分别是选手的报名号k（1000 ≤ k ≤ 9999）和该选手的笔试成绩s（1 ≤ s ≤ 100）。数据保证选手的报名号各不相同。
输出
第一行，有两个整数，用一个空格隔开，第一个整数表示面试分数线；第二个整数为进入面试的选手的实际人数。
从第二行开始，每行包含两个整数，中间用一个空格隔开，分别表示进入面试的选手的报名号和笔试成绩，按照笔试成绩从高到低输出，如果成绩相同，则按报名号由小到大的顺序输出。
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;
struct student
{
    int no;
    int score;
} stu[5000];
bool operator<(student a, student b)
{
    if (a.score != b.score)
        return a.score > b.score;
    return a.no < b.no;
}
int main()
{
    int n, m, want, i;
    int score, num=0;
    cin >> n >> m;
    want = floor(m*1.5);
    for (int i=0; i<n; i++){
        cin >> stu[i].no >> stu[i].score;
    }
    stable_sort(stu, stu+n);
    score = stu[want-1].score;
    num = want;
    for (i=want; i<n; i++){ // 处理重分
        if (stu[i].score == stu[want-1].score){
            num++;
        }
    }
    cout << score << " " << num << endl;
    for (i=0; i<num; i++)
        cout << stu[i].no << " " << stu[i].score << endl;
    return 0;
}

描述
病人登记看病，编写一个程序，将登记的病人按照以下原则排出看病的先后顺序：
1. 老年人（年龄 >= 60岁）比非老年人优先看病。
2. 老年人按年龄从大到小的顺序看病，年龄相同的按登记的先后顺序排序。
3. 非老年人按登记的先后顺序看病。
输入
第1行，输入一个小于100的正整数，表示病人的个数；
后面按照病人登记的先后顺序，每行输入一个病人的信息，包括：一个长度小于10的字符串表示病人的ID（每个病人的ID各不相同且只含数字和字母），一个整数表示病人的年龄，中间用单个空格隔开。
输出
按排好的看病顺序输出病人的ID，每行一个。
#include<iostream>
#include<iomanip>
#include<string>
#include<vector>
#include<cmath>
#include<algorithm>
using namespace std;
struct patient
{
    string ID;
    int age;
    int order;
}pa[100];
bool operator <(patient a,patient  b)
{
    if(a.age>=60&&b.age<60)return true;
    else if(a.age<60&&b.age>=60)return false;
    else
    {
        if(a.age>=60&&b.age>=60)return a.age>b.age;
           else
                  return a.order<b.order;
   }
}
int main()
{
    int n ,i;
    cin>>n;
    for(i=0;i<n;i++)
    {
        cin>>pa[i].ID>>pa[i].age;
        pa[i].order=i;
    }
     stable_sort(pa, pa+n);
 
    for(i=0;i<n;i++)
    {
        cout<<pa[i].ID<<endl;
    }
    return 0;
}

描述
程序填空题，自己编写排序函数 mysort，使得其能够对任意类型的数组排序
输入
多组数据。每组数据以整数 n开头(n<10)，然后是n个整数
输出
对每组数据，输出三行。
第一行是整数从小倒大排序的结果
第二行是按个位数从小到大排序的结果(如果个位数相同，小的排在前面)
第三行还是整数从小倒大排序的结果
#include <iostream>
using namespace std;
struct A {
	int nouse1;
	int nouse2;
	int n;
};
// 在此处补充你的代码
void mysort(void *a,int n,int w,int(*f)(const void * e1,const void * e2))
{
 char *s=(char*)a;
 for(int i=0;i<n-1;i++){
  for(int j=i+1;j<n;j++){
   char *p1=(char*)a+i*w;
   char *p2=(char*)a+j*w;
   if(f(p1,p2)>0){
    for(int k=0;k<w;k++){
     char tem=p1[k];
     p1[k]=p2[k];
     p2[k]=tem;
    }
   }
  }
 } 
}
int MyCompare1( const void * e1,const void * e2) 
{
	int * p1 = (int * ) e1;
	int * p2 = (int * ) e2;
	return * p1 - * p2;
}
int MyCompare2( const void * e1,const void * e2) 
{
	int * p1 = (int * ) e1;
	int * p2 = (int * ) e2;
	if( (* p1 %10) - (* p2 % 10))
		return (* p1 %10) - (* p2 % 10);
	else
		return * p1 - * p2;
}
int MyCompare3( const void * e1,const void * e2) 
{
	A * p1 = (A*) e1;
	A * p2 = (A*) e2;
	return p1->n - p2->n;
}
int a[20];
A b[20];
int main ()
{	
	int n;
	while(cin >> n) {
		for(int i = 0;i < n; ++i) {
			cin >> a[i];
			b[i].n = a[i];
		}
		mysort(a,n,sizeof(int),MyCompare1);
		for(int i = 0;i < n; ++i) 
			cout << a[i] << "," ;
		cout << endl;
		mysort(a,n,sizeof(int),MyCompare2);
		for(int i = 0;i < n; ++i) 
			cout << a[i] << "," ;
		cout << endl;
		mysort(b,n,sizeof(A),MyCompare3);
		for(int i = 0;i < n; ++i) 
			cout << b[i].n << "," ;
		cout << endl;
	}
	return 0;
}

描述
编写GetDoubleFromString函数，该函数可以不断从字符串中取出正浮点数或整数，无数可取，则返回值小于0
输入
多组数据，每组数据一行
输出
针对每组数据，将其中的数输出来。每行一个数，保留小数点后面6位。输入数据中只会有正数，不用考虑负号。两个数之间有至少一个非数字非小数点的字符。
#include <iostream>
#include <iomanip>
using namespace std;
double GetDoubleFromString(char * str)
{
// 在此处补充你的代码
static char* p;
if(str)
    p = str;
double num = 0;
while(*p && !(*p>='0'&&*p<= '9'))
    ++p;
if(*p == 0)
    return -1;
while(*p>='0' && *p<='9') {
    num = num*10+*p-'0';
    ++p;
}
if(*p == '.') {
    ++p;
    double i = 10;
    while(*p>='0' && *p<='9') {
        num += (*p-'0')/i;
        ++p;
        i *= 10;
    }
}
return num;
}

int main()
{
	char line[300];
	while(cin.getline(line,280)) {
		double n;
		n = GetDoubleFromString(line);
		while( n > 0) {
			cout << fixed << setprecision(6) << n << endl;
			n = GetDoubleFromString(NULL);
		}
	}
	return 0;
}
























