描述
输入一行字符，统计出其中数字字符的个数。
输入
一行字符串，总长度不超过255。
输出
输出为1行，输出字符串里面数字字符的个数。
#include <iostream>
#include <cstring>
#include <cstdio>
using namespace std;
int main()
{
	char sen[256];
	int i=0,count=0,len;
	gets(sen);
	len=strlen(sen);
	for(i=0;i<len;++i)
		if(sen[i]>=48&&sen[i]<=57)
			count++;
	cout<<count<<endl;
	return 0;
 }

描述
给定一个只包含小写字母的字符串，请你找到第一个仅出现一次的字符。如果没有，输出no。
输入
一个字符串，长度小于100000。
输出
输出第一个仅出现一次的字符，若没有则输出no。
#include<iostream>
#include<cstring>
using namespace std;
int main(){
    char line[256];
    int i,j;
    cin.getline(line,256);
    for(i=0;line[i];i++){
        for(j=0;line[j];j++){
            if(i==j)continue;
            if(line[i]==line[j])break;
        }
        if(line[j]==0)break;
    }

    if(line[i]==0)cout<<"no";
    else cout<<line[i];
    return 0; 
}
注意：要在循环外使用line[i]和line[j]，所以i和j要定义在循环外；没找到的话最终line[i]和line[j]会变为0；字符比对不能和自己比。

描述
石头剪子布，是一种猜拳游戏。起源于中国，然后传到日本、朝鲜等地，随着亚欧贸易的不断发展它传到了欧洲，到了近现代逐渐风靡世界。简单明了的规则，使得石头剪子布没有任何规则漏洞可钻，单次玩法比拼运气，多回合玩法比拼心理博弈，使得石头剪子布这个古老的游戏同时用于“意外”与“技术”两种特性，深受世界人民喜爱。
游戏规则：石头打剪刀，布包石头，剪刀剪布。
现在，需要你写一个程序来判断石头剪子布游戏的结果。
输入
输入包括N+1行：
第一行是一个整数N，表示一共进行了N次游戏。1 <= N <= 100。
接下来N行的每一行包括两个字符串，表示游戏参与者Player1，Player2的选择（石头、剪子或者是布）：
S1 S2
字符串之间以空格隔开S1,S2只可能取值在{"Rock", "Scissors", "Paper"}（大小写敏感）中。
输出
输出包括N行，每一行对应一个胜利者（Player1或者Player2），或者游戏出现平局，则输出Tie。
#include<iostream>
#include<cstring>
using namespace std;
int main(){
    char S1[10],S2[10];
    int N;
    int P[100],Q[100];
    cin>>N;
    for(int i=0;i<N;i++){
        cin>>S1;
        cin>>S2;
        if(strcmp(S1,"Paper")==0)P[i]=1;
        else if(strcmp(S1,"Scissors")==0)P[i]=2;
        else if(strcmp(S1,"Rock")==0)P[i]=3;
        
        if(strcmp(S2,"Paper")==0)Q[i]=1;
        else if(strcmp(S2,"Scissors")==0)Q[i]=2;
        else if(strcmp(S2,"Rock")==0)Q[i]=3;
    }
    for(int i=0;i<N;i++){
      switch(P[i]-Q[i]){
        case 0:cout<<"Tie"<<endl;
        break;
        case 1:cout<<"Player1"<<endl;
        break;
        case 2:cout<<"Player2"<<endl;
        break;
        case -1:cout<<"Player2"<<endl;
        break;
        case -2:cout<<"Player1"<<endl;
        break;
      }
    }
    return 0; 
}

043:最长最短单词
查看提交统计提问
总时间限制: 1000ms 内存限制: 65536kB
描述
输入1行句子（不多于200个单词，每个单词长度不超过100），只包含字母、空格和逗号。单词由至少一个连续的字母构成，空格和逗号都是单词间的间隔。
试输出第1个最长的单词和第1个最短单词。
输入
一行句子。
输出
两行输出：
第1行，第一个最长的单词。
第2行，第一个最短的单词。
#include <iostream>
#include<cstring>
using namespace std;

int main(){
    char s[20000];
    int i=0,j=0; //j用来记录每个单词的长度
    int max=0,min=200;
    int n,m,t,maxbegin,minbegin;
    cin.getline(s,20000);
    t=strlen(s);
    while(s[i]!='\0')//遍历字符串 
    {
        if((s[i]!=' ')&&(i!=t-1)){j++;}//字符有三种情况：1非空格且非末尾 
        if(s[i]==' '){
           n=j;
           m=i-j;
           if(n>max){max=n;maxbegin=m;}
           if(n<min){min=n;minbegin=m;}
           j=0;}//2空格，遇到空格则切断并标记单词长度和起始位置，并将单词长度j置零 
        if(i==t-1){
           j++;
           n=j;
           m=i-j+1;
           if(n>max){max=n;maxbegin=m;}
           if(n<min){min=n;minbegin=m;}
           j=0;}//3末尾，遇到末尾则切断并标记单词长度和起始位置 
        i++;
    }
    for(int k=maxbegin;k<max+maxbegin;k++){
        cout<<s[k];
    }
    cout<<endl;
    for(int l=minbegin;l<min+minbegin;l++){
    cout<<s[l];
    }
    return 0;
}

描述
在情报传递过程中，为了防止情报被截获，往往需要对情报用一定的方式加密，简单的加密算法虽然不足以完全避免情报被破译，但仍然能防止情报被轻易的识别。
我们给出一种最简的的加密方法，对给定的一个字符串，把其中从a-y，A-Y的字母用其后继字母替代，把z和Z用a和A替代，其他非字母字符不变，则可得到一个简单的加密字符串。
输入
输入一行，包含一个字符串，长度小于80个字符。
输出
输出每行字符串的加密字符串。
#include <iostream>
#include<cstring>
using namespace std;
int main(){
    char s[100],r[100];
    int t;
    cin.getline(s,100);
    t=strlen(s);
    for(int i=0;i<t;i++){//如果在a-y,A-Y之间 
        if((s[i]<='y')&&(s[i]>='a')||(s[i]<='Y')&&(s[i]>='A')){
            r[i]=s[i]+1;
        }
        else if(s[i]=='z'){//如果是z 
            r[i]='a';
        }
        else if(s[i]=='Z'){//如果是Z 
            r[i]='A';
        }
        else {r[i]=s[i];}//其他字符保持不变 
    }
    for(int i=0;i<t;i++){
    cout<<r[i];
    }
    return 0;
}

