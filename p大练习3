描述
所谓角谷猜想，是指对于任意一个正整数，如果是奇数，则乘3加1，如果是偶数，则除以2，得到的结果再按照上述规则重复处理，最终总能够得到1。如，假定初始整数为5，计算过程分别为16、8、4、2、1。
程序要求输入一个整数，将经过处理得到1的过程输出来。
输入
一个正整数N(N <= 2,000,000)
输出
从输入整数到1的步骤，每一步为一行，每一部中描述计算过程。最后一行输出"End"。如果输入为1，直接输出"End"。
#include<iostream>
using namespace std;
int main()
{
    unsigned long long N,a,b;
    cin>>N;
    while(N!=1){
        if(N%2==1){
            a=N*3+1;
            cout<<N<<"*3+1="<<a<<endl;
        }
        else {
            a=N/2;
            cout<<N<<"/2="<<a<<endl;
        }
        N=a;
        if(N==0){
            break;
        } 
}
    if(N=1){
        cout<<"End"<<endl;
    }
    return 0;
}

描述
监护室每小时测量一次病人的血压，若收缩压在90 - 140之间并且舒张压在60 - 90之间（包含端点值）则称之为正常，现给出某病人若干次测量的血压值，计算病人保持正常血压的最长小时数。
输入
第一行为一个正整数n，n < 100
其后有n行，每行2个正整数，分别为一次测量的收缩压和舒张压，中间以一个空格分隔。
输出
输出仅一行，血压连续正常的最长小时数。
#include<iostream>
using namespace std;
int main()
{
    int n,a[100][5],max=0,m=0;
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>a[i][0]>>a[i][1];
        if(a[i][0]>=90 && a[i][0]<=140 && a[i][1]>=60 && a[i][1]<=90){
               m++;}
    else {
            if(m>max)
                max=m;
                m=0;             
    }
}
    if(m>max)max=m; 
    cout<<max;
    return 0;
}


描述
给定一个整数，请将该数各个位上数字反转得到一个新数。新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零（参见样例2）。
输入
输入共 1 行，一个整数N。
-1,000,000,000 ≤ N≤ 1,000,000,000。
输出
输出共 1 行，一个整数，表示反转后的新数。
#include<iostream>
using namespace std;
int main()
{
    int n,N;
    cin>>N;
     if(N>0){
        if(N%10!=0){    
           while(N!=0){
           cout<<N%10;N=N/10;
           }
        }
        else
           {while(N%10==0){
           N=N/10;
           }
           while(N!=0){
           cout<<N%10;N=N/10;
           }
        }
     }
    else{cout<<'-';N=-N;
    if(N%10!=0){    
           while(N!=0){
           cout<<N%10;N=N/10;
           }
        }
        else
           {while(N%10==0){
           N=N/10;
           }
           while(N!=0){
           cout<<N%10;N=N/10;
           }
        }
    }
    return 0;
}


描述
一个十进制自然数,它的七进制与九进制表示都是三位数，且七进制与九进制的三位数码表示顺序正好相反。编程求此自然数,并输出显示。
输入
无。
输出
三行：
第一行是此自然数的十进制表示；
第二行是此自然数的七进制表示；
第三行是此自然数的九进制表示。
#include<iostream>
using namespace std;
int main()
{
    int n,m,j=0,sum=0;
    int s[10];    //定义存放七进制每一位的数组
    for(int i=100;i<1000;i++){
        n=i;
        while(n>=7){s[j]=n%7;n=n/7;j++;}  //计算并存储七进制每一位
        for(int l=0;l<j;l++){
                     m=s[l];
                 for(int k=j-1;k>=0;k--){ m*=9;}          
             sum+=m;    
        }
//输出结果
        if(i==sum+n){
        cout<<i<<endl;
        cout<<n;
        for(int l=j-1;l>=0;l--){
        cout<<s[l];}
        cout<<endl;
        for(int l=0;l<=j-1;l++){
        cout<<s[l];}
        cout<<n<<endl;
        }
        sum=0;
        j=0;    
        }
    return 0;
}


描述
雇佣兵的体力最大值为M，初始体力值为0、战斗力为N、拥有X个能量元素。
当雇佣兵的体力值恰好为M时，才可以参加一个为期M天的战斗期，战斗期结束体力值将为0。在同一个战斗期内，雇佣兵每连续战斗n天，战斗力就会上升1点，n为当前战斗期开始时的战斗力。
一个战斗期结束后，雇佣兵需要用若干个能量元素使其体力恢复到最大值M，从而参加下一个战斗期。每个能量元素恢复的体力值不超过当前的战斗力。每个能量元素只能使用一次。
请问：雇佣兵的战斗力最大可以到达多少。
输入
一行包括三个整数M、N、X，相邻两个整数之间用单个空格隔开。M、N、X均为不超过10000的正整数。
输出
输出一个整数，为雇佣兵的最大战斗力。
#include<iostream>
using namespace std;
int main()
{
int M,N,X;
cin>>M>>N>>X;
while(X>0){ if(M%N==0)X=X-M/N;
                   else X=X-M/N-1;
                   if(X<0)break;
               N+=M/N;}
cout<<N;
return 0;
}


描述
请统计某个给定范围[L, R]的所有整数中，数字2出现的次数。
比如给定范围[2, 22]，数字2在数2中出现了1次，在数12中出现1次，在数20中出现1次，在数21中出现1次，在数22中出现2次，所以数字2在该范围内一共出现了6次。
输入
输入共 1 行，为两个正整数 L 和 R，之间用一个空格隔开。
输出
输出共 1 行，表示数字 2 出现的次数。
#include<iostream>
using namespace std;
int main()
{
    int a,b,n,m=0;
    cin>>a>>b;
    for(int i=a;i<=b;i++){
        n=i;
        while(n){
            if(n%10==2)m++;
            n/=10;
        }
    }
    cout<<m<<endl;
    return 0;
}





